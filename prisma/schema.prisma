// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id            String   @id @default(cuid())
  slug          String   @unique
  // ...

  productName   String?
  subtitle      String?
  artist        String?               // bei DVDs: Regie
  trackTitle    String?

  priceEUR      Float
  currency      String   @default("EUR")

  image         String
  images        Json     @default(dbgenerated("'[]'::jsonb")) // ‚Üê default []

  // NEU ‚§µÔ∏é
  genre         String?  @db.VarChar(50)   // z.B. "Hardstyle", "Techno", ... / bei DVDs: "Action", ...

  categoryCode  String                 // z.B. "bv","sv","bcd","scd","bhs","ss","dvd","bd"
  format        String?
  year          Int?
  upcEan        String?                // EAN/UPC (bei DVDs wichtig f√ºrs Lookup)
  catalogNumber String?
  condition     String?

  weightGrams   Int?
  isDigital     Boolean  @default(false)
  sku           String?

  stock         Int      @default(1)

  active        Boolean  @default(true)
  createdAt     DateTime @default(now())

  orderItems    OrderItem[]

  // üîé hilfreiche Indizes f√ºr Shop-Listen/Filter
  @@index([active, stock, categoryCode, createdAt])
  @@index([categoryCode, createdAt])

  // üîé NEU: schneller Barcode-Lookup (nicht unique, falls Varianten gleichen EAN nutzen)
  @@index([upcEan])
}

model Order {
  id            String    @id @default(cuid())
  stripeId      String    @unique
  email         String?
  amountTotal   Int
  currency      String
  status        String
  createdAt     DateTime  @default(now())

  items         OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String

  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  qty       Int
  unitPrice Int
}

model Release {
  id          String   @id @default(cuid())
  title       String
  type        String?
  year        Int?
  artists     String?
  label       String?
  catalog     String?
  cover       String?
  spotifyUrl  String?
  appleUrl    String?
  beatportUrl String?
  createdAt   DateTime @default(now())
}

model Artist {
  id         String   @id @default(cuid())
  name       String
  bio        String?
  photo      String?
  spotifyUrl String?
  instagram  String?
  website    String?
  createdAt  DateTime @default(now())
}

model PageView {
  id         String   @id @default(cuid())
  path       String
  referrer   String?
  ua         String?
  ipHash     String?   // gehashte IP (mit Salz)
  sessionId  String?   // optionale Besucher-Session
  country    String?   // aus Header (z.B. Vercel)
  createdAt  DateTime  @default(now())

  @@index([path, createdAt])
  @@index([createdAt])
  @@index([ipHash, createdAt])
}

/**
 * Optional: Cache-Tabelle f√ºr DVD/BR-Barcode-Metadaten
 * Wird vom /api/utils/lookup-dvd zuerst abgefragt.
 */
model DvdMeta {
  ean       String   @id
  title     String?
  year      Int?
  director  String?
  genre     String?
  format    String?  // "DVD" | "Blu-ray" | ...
  edition   String?
  cover     String?
  updatedAt DateTime @updatedAt
}